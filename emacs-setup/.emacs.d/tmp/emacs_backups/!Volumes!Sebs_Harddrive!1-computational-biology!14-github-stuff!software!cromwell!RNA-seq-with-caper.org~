* ENCODE RNA sequencing pipeline with ~caper~

** Quickstart

ENCODE recommends and supports the usage of the workflow manager ~[[https://cromwell.readthedocs.io/en/stable/][cromwell]]~ via the ~Python~ wrapper package ~[[https://github.com/ENCODE-DCC/caper][caper]]~.
~Caper~ requires the following files as input:

- ~[WORKFLOW.wdl]~
- ~[INPUT.json]~

and to run:

#+BEGIN_SRC bash
caper run [WORKFLOW.wdl] -i [INPUT.json]
#+END_SRC

** "Backend" options
~Caper~ can run with different backends. Most of them are not of interested to us at this stage (google cloud, aws...), whereas others 
are a necessity (slurm, docker, singularity).

*** Container
To specify the container backend, the ~caper run~ command can simply be expanded to:

#+BEGIN_SRC bash
caper run [WORKFLOW.wdl] -i [INPUT.json] --[singularity/docker]
#+END_SRC

*** SLURM
To run ~caper~ with slurm, the command is /wrapped/ in the slurm command:

#+BEGIN_SRC bash
sbatch -A [SLURM_ACCOUNT] -p [SLURM_PARTITON] -J [JOB_NAME] --export=ALL --mem 3G -t 4-0 --wrap "caper run [WORKFLOW.wdl] -i [INPUT.json]"
#+END_SRC



** ~INPUT.json~ for the RNA seq workflow
The ~INPUT.json~ file for the ENCODE RNAseq pipeline needs to specify a variety of fields, as in the example file below.

#+BEGIN_SRC java
{
    "rna.endedness" : "single",
    "rna.fastqs_R1" : [["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF9_S9_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF10_S10_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF11_S11_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF12_S12_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF1_S1_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF2_S2_L001_R1_001.fastq.gz"], 
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF3_S3_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF4_S4_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF5_REDO_S5_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF6_S6_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF7_S7_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF8_S8_L001_R1_001.fastq.gz"],
                       ["/data/scratch/Seb/RNAseq/genomicsWA_workflow/inputs/CF9_S9_L001_R1_001.fastq.gz"]],
    "rna.fastqs_R2" : [],
    "rna.align_index" : "/data/scratch/Seb/RNAseq/genomicsWA_workflow/indices/STAR_index.tar.gz",
    "rna.rsem_index" : "/data/scratch/Seb/RNAseq/genomicsWA_workflow/indices/RSEM_index.tar.gz",
    "rna.bamroot" : "genomicsWA",
    "rna.strandedness" : "stranded",
    "rna.strandedness_direction" : "reverse",
    "rna.chrom_sizes" : "/data/scratch/Seb/RNAseq/genomicsWA_workflow/indices/GRCh38_EBV.chrom.sizes.tsv",
    "rna.align_ncpus" : 16,
    "rna.align_ramGB" : 16,
    "rna.kallisto_index" : "/data/scratch/Seb/RNAseq/genomicsWA_workflow/indices/KALLISTO_index.idx",
    "rna.kallisto_number_of_threads" : 16,
    "rna.kallisto_ramGB" : 16,
    "rna.rna_qc_tr_id_to_gene_type_tsv" : "/data/scratch/Seb/RNAseq/genomicsWA_workflow/rna-seq-pipeline/transcript_id_to_gene_type_mappings/gencodeV24pri-tRNAs-ERCC-phiX.transcript_id_to_genes.tsv",
    "rna.bam_to_signals_ncpus" : 16,
    "rna.bam_to_signals_ramGB" : 16,
    "rna.rsem_ncpus" : 16,
    "rna.rsem_ramGB" : 16,
    "rna.kallisto_fragment_length" : [250, 250],
    "rna.kallisto_sd_of_fragment_length" : [10, 10]
}
#+END_SRC

*** Some notes on the parameters
Most of the parameters are self explanatory. A few things are important to note:
1. ~rna.fastqs_R1~ and ~rna.fastqs_R2~ need to be in the same order in paired end reads
2. all paths need to be absolute paths
3. ~rna.kallisto_fragment_length~ and ~rna.kallisto_sd_of_fragment_length~ both always need to be specified, as the workflow will stop if they are missing. The 250 and 10 are the Illumina defaults and will probably work in most cases.


** ~WORKFLOW.wdl~ for rna-sequencing-pipeline
This ~.wdl~ is provided by ENCODE and will be part of the git folder downloaded via

#+BEGIN_SRC bash
git clone https://github.com/ENCODE-DCC/rna-seq-pipeline.git
#+END_SRC

** Notes and issues
- Somehow the pipeline with ~caper~ only runsd when being in a specific directory one level up from the rna-sequencing-pipeline git directory????
- Even with specifying the fragment length and sd of fragment length in the ~INPUT.json~ the workflow crashes at the ~kallisto~ step.

