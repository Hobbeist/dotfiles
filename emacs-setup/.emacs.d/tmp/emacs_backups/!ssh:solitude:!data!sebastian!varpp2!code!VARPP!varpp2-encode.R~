#!/usr/bin/env Rscript

# Note: The code is modified to only save the model as a R object
# Running VARPP across all hpo terms

library(varppRule)
library(varppRuleFit)
library(tidyverse)
library(optparse)
library(precrec)

sessionInfo()
dark <- FALSE;
error <- 0;
option_list = list(
  make_option(c("-b", "--benign"),
              type="character",
              default=NULL,
              help="File containing benign variants.",
              metavar="character"),
  make_option(c("-p", "--pathogenic"),
              type="character",
              default=NULL,
              help="File containing disease associated variants.",
              metavar="character"),
  make_option(c("-e", "--hpo"),
              type="character",
              default=NULL,
              help="File containing hpo term associated genes.",
              metavar="character"),
  make_option(c("-n", "--ntree"),
              type="integer",
              default=2000,
              help="Number of trees.",
              metavar="character"),
  make_option(c("-o", "--output"),
              type="character",
              default=NULL,
              help="Output file name.",
              metavar="character")

);

opt_parser <- OptionParser(option_list=option_list,
                           description = "\nVARPP script.",
                           epilogue = "Example:\n\n  ./VARPP.sh -b <benign_variants-.txt> -p <disease_variants.txt> -e <HPO_term> -n <number of trees> -o <VARPP_out>  \n\n");

opt <- parse_args(opt_parser)

error <-  opt$error

summaryfilename <- opt$summary

if (is.null(opt$benign)){
  print_help(opt_parser)
  stop("Missing benign file!\n", call.=FALSE)
}
if (is.null(opt$pathogenic)){
  print_help(opt_parser)
  stop("Missing pathogenic file!\n", call.=FALSE)
}

if (is.null(opt$hpo)){
  print_help(opt_parser)
  stop("Missing HPO name!\n", call.=FALSE)
}

if (is.null(opt$output)){
  print_help(opt_parser)
  stop("Missing output file name!\n", call.=FALSE)
}

VARPPcheckForFile <- function(x)
{
  if(!file.exists(x)){
    print_help(opt_parser)
    stop(paste("File",x," not found!\n"), call.=FALSE)

  }
}

VARPPcheckForFile(opt$benign)
VARPPcheckForFile(opt$pathogenic)


hpo                     <- opt$hpo
ntree                   <- opt$ntree
out_file                <- opt$output 
benign_variant_file     <- opt$benign
pathogenic_variant_file <- opt$pathogenic

## benign_variant_file     <- "/data/sebastian/varpp2/data/ENCODE/benign_encode_author.csv"
## pathogenic_variant_file <- "/data/sebastian/varpp2/data/ENCODE/patho_encode_author.csv"
## hpo                     <- "HP:0000591"
## ntree                   <- 20
## out_file                <- "/data/scratch/Seb/VARPP2-paper-tests/results/RuleFit-all-hpo-terms/" 


# The old way, as we only incorporate GTEx and HCL in varppRule
dat                  <- list()
dat$dat              <- rbind(read_csv(benign_variant_file), read_csv(pathogenic_variant_file))

dat$dat <- dat$dat %>%
    select(Gene, GeneVariant, Pathogenic, CADD_PHRED_SCORE, names(dat$dat)[8:length(names(dat$dat))]) %>%
    rename(CADD_raw_rankscore = CADD_PHRED_SCORE)


dat$benign_variants  <- read_csv(benign_variant_file)
dat$benign_variants <- dat$benign_variants %>%
    select(Gene, GeneVariant, Pathogenic, CADD_PHRED_SCORE, names(dat$benign_variants)[8:length(names(dat$benign_variants))]) %>%
    rename(CADD_raw_rankscore = CADD_PHRED_SCORE)

dat$disease_variants <- read_csv(pathogenic_variant_file)
dat$disease_variants <- dat$disease_variants %>%
    select(Gene, GeneVariant, Pathogenic, CADD_PHRED_SCORE, names(dat$disease_variants)[8:length(names(dat$disease_variants))]) %>%
    rename(CADD_raw_rankscore = CADD_PHRED_SCORE)

x <- varppRuleFit::varpp_plus_rf(dat,
                  ntree=ntree,
                  max.depth=3,
                  cores=32)



saveRDS(x, paste0(out_file,hpo,"_encode-varpp.rds"))




# To extract all the tissues
#plyr::count(unlist(str_extract_all(as.vector(unlist(rules[grep("rule",rules$Variable), "Description"])), "[A-Z_a-z]+"))) %>% arrange(desc(freq))




